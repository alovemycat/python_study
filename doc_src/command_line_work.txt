<!--VARIABLES {"title": "Работа в командной строке", "SORT_ORDER": "10"}-->
[TOC]

----------------------------------------------------------------------------------------------------
<!--i ["интерфейс", "UI", "CLI"]-->
# Интерфейс 
 
**Интерфейс** --- средство взаимодействия пользователя с программой.
  
- **Пользовательский интерфейс** (UI, user's interface), интерфейс, обеспечивающий передачу 
    информации между пользователем-человеком и программно-аппаратными компонентами компьютерной системы.
 
- **Графический интерфейс**  (GUI, graphic UI), это форма пользовательского интерфейса, которая 
    позволяет пользователям взаимодействовать с устройством с помощью графических элементов (значки, 
    курсоры, кнопки).

<!--i ["консоль", "командная строка"]-->
<p><img src="<!--path pict-->run_shell.png" title="md2html"
class="floatRight" /></p>

- **Командная строка** (*CLI - command line interface*) или **консоль**, является текстовым и 
    командным интерфейсом
    для обработки и манипулирования файлами на компьютере. Она делает то же, что и 
    Проводник в Windows (или Finder в Mac OS X), но у неё нет графического интерфейса. 
    Для открытия консоли необходимо нажать `Win`+`R`, откроется окно, показанное на картинке, 
    набрать имя команды `cmd` и нажать `Enter`.

Перед каждой командой будет стоять знак `>` и пробел (в Linux и Mac OS --- `$`). То, что написано до 
знака `$` или `>`, 
плюс сам знак, всё вместе называется *приглашением* командной строки. Как правило, оно включает адрес 
*текущего каталога*. 
 
<p style="clear: both;"></p>
 
----------------------------------------------------------------------------------------------------
# Структура файловой системы
 
![](<!--path pict-->tree.png)

На схеме представлено пользовательское представление данных, хранящиеся на устройстве  хранения 
(флешки, жесткие диски и др.). Устройства  хранения сохраняют информацию используя особенности
физического процесса воздействия (намагничивание и т.д.).
    
Контроллеры этих устройств предоставляет низкоуровневый доступ к данным, например используя 
физическую адресацию. Конечному пользователю с таким представлением таких данных работать не удобно. 
Поэтому были разработаны специальные программы, которые трансформируют это представление в более 
удобный и унифицированный (единообразный) вид. Элементы данного представления:

- **логический диск**, который обозначается буквами с двоеточиями: `С:`, `D:`. Одно физическое 
    устройство может быть логически разбито на части.
    
- **файлы** (*англ.* file) — именованная область данных на носителе информации, используемая как базовый 
    объект взаимодействия с данными в операционных системах.
    
- **папки** или **директории** или **каталоги**, это средство логической группировки файлов. Папки 
    могут "содержать" 
    файлы и другие папки, таким образом формируется "древовидная" (иерархическая) структура. 
    
<!--i ["корневой каталог"]--> 
Логический 
диск представляется корневым элементом этой структуры и называется **корневым каталогом**.

Для указания файла в этой структуре используется **путь** к файлу, который предоставляет перечисление
всех узлов (каталогов) дерева от корневого каталога до данного файла, включая данный файл. Узлы 
перечисляют через `\`, например:

````
С:\folder1\folder2\folder3\file2.txt
````

где `С:\` --- это корневой каталог диска. Данный путь является *абсолютным*, потому что начинается с
корневого каталога.

<!--i ["текущий каталог"]--> 
**Текущий каталог** --- это каталог, который выбран в качестве текущего в рамках текущего контекста 
выполнения программы (например, *окна терминала*). Пути относительно текущего каталога называются 
*относительным*. Например, при текущем каталоге `С:\folder1`, *относительный* путь к 
представленному выше файлу будет `folder2\folder3\file2.txt`.

----------------------------------------------------------------------------------------------------
# Основные команды Windows

Чтобы вывести справку, почти к любой команде можно использовать аргумент `/?`, например:

````shell
>cd /?
Displays the name of or changes the current directory.

CHDIR [/D] [drive:][path]
CHDIR [..]
CD [/D] [drive:][path]
CD [..]

  ..   Specifies that you want to change to the parent directory.
.  .  .
````

Данная команда вывела справочную информацию о команде `cd`. В первой строке дается краткое описание 
выполняемых командой действий. Далее перечислены варианты использования.


## `cd` --- смена текущего каталога

`cd` означает "change directory" (сменить каталог).


## `dir` --- просмотр содержимого каталога

````shell
C:\my\path>dir
    14.09.2022  22:40    <DIR>          .
    14.09.2022  22:40    <DIR>          ..
    07.07.2022  15:15    <DIR>          business
    05.09.2022  22:59    <DIR>          english_study
    14.09.2022  22:41    <DIR>          study
    31.07.2022  20:38    <DIR>          work
  
               0 File(s)              0 bytes
               9 Dir(s)  92 635 676 672 bytes free
````

----------------------------------------------------------------------------------------------------
<!--i ["переменные окружения", "environment variables"] -->
# Переменные окружения

**Переменные окружения** (*англ.* environment variables) --- установленные в операционной системе
(ОС) и доступные всем программам. Значениями этих переменных могут быть только строки. Пример:

````shell
>set CAT_NAME=Федор

>echo кот %CAT_NAME%
кот Федор
````

Команда командной строки `set` устанавливает переменную окружения с именем `CAT_NAME` и значением
`Федор`. Интерпретатор командной строки распознает указания переменных (в ОС Windows они 
заключаются в символы `%`) и заменяет их на соответствующие значения. 

!!! note 
    В ОС Windows имена переменных окружения являются регистронезависимыми , т.е. команда 
    `echo кот %cat_name%` будет иметь такой же результат.
    
    В ОС Linux переменные окружения регистрозависимы, т.е. `CAT_NAME` и `cat_name` это разные  
    переменные. Формат указания переменных такой: `$CAT_NAME` или `${CAT_NAME}`.
    
    В большинстве случаев принято задавать имена переменных окружения полностью в верхнем регистре.

----------------------------------------------------------------------------------------------------
<!--i ["echo"] -->
# Генерация входных данных

Программа может принимать многострочные входные данные из стандартного потока ввода (с клавиатуры 
или из файла). Например может быть такая программа на языке Python:

````code
while True:
    i = int(input())
    if i < 10:
        continue
    elif i > 100:
        break
    print(i)
````

При небольшом количестве данных запуск такой программы может выполняться следующим образом:

````shell
>(echo 9 & echo 30 & echo 20 & echo 101) | python process_input.py
30
20
````

Также протестируем данный метод с использованием встроенной команды `find`:

````shell
>(echo a & echo b) | find "b"
b
````
