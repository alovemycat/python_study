<!--VARIABLES {"title": "Рабочая среда Python", "code": "python_working_environment",
 "SORT_ORDER": "12"}-->

[TOC]

----------------------------------------------------------------------------------------------------
# Запуск программ на языке Python

<!--i ["Интерактивный режим", "IDLE"]-->
## Интерактивный режим (IDLE)

Нажать `Win`+`R`

<!--i консоль-->
![](<!--path pict-->run_shell.png)

Откроется консоль. Набрать 

```shell
>python
Python 3.10.7 (tags/v3.10.7:6cc6b13, Sep  5 2022, 14:08:36) [MSC v.1933 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> 2+2
4
```

<!--i Сценарный режим-->
## Сценарный режим

Создать программу в файле, например `hello.py`:

````code
print("Hello, world!")
````

Открыть консоль (см. выше), перейти в каталог, где находится файл программы:
 

````shell
>cd /d X:\my\path\mycode
````

Вызвать программу на выполнение:

````shell
>python hello.py
Hello, world!
````

----------------------------------------------------------------------------------------------------
<!--i ["библиотека", "library"] --><a name="library_installation"></a>
# Установка библиотек

**Библиотека** (от англ. *library*) в программировании — сборник подпрограмм или объектов, 
используемых для разработки других программ.

<!--i ["модуль", "module"] -->
**Модуль** (от англ. *module*) это минимальная единица использования библиотеки, обычно 
представляется файлом с расширением `py`. Библиоте́ки могут быть стандартными, идущими в комплекте 
поставки со средой исполнения python. Например, модуль `math` входит в одну из стандартных библиотек
python.

<!--i ["импорт модуля", "import"] -->

````shell
>>> import math
>>> print(math.pi)
3.141592653589793
````

Этот модуль достаточно *импортировать* и можно использовать.
Также можно использовать другие библиотеки предоставляемые другими разработчиками. Такие библиотеки
нужно получать дополнительно.

<!--i ["пакет", "package"] -->
Удобным способом  поставки и распространения библиотек является использование  **пакетов**
(от англ. *package*). Для управления пакетами используется пакетные менеджеры (например, `pip`), 
которые позволяют устанавливать, обновлять, удалять пакеты и выполнять другие действия. 
Пример установки пакета `requests`:

````shell
>>> import requests
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ModuleNotFoundError: No module named 'requests'
````

Пакет в системе отсутствует, поэтому его импорт вызывает ошибку. Требуется установка пакета.

````shell
E:\app\md2html\python>python -m pip install requests
E:\app\md2html\python>python -m pip install requests
Collecting requests
  Downloading requests-2.28.1-py3-none-any.whl (62 kB)
     |████████████████████████████████| 62 kB 1.1 MB/s
Collecting urllib3<1.27,>=1.21.1
  Downloading urllib3-1.26.13-py2.py3-none-any.whl (140 kB)
     |████████████████████████████████| 140 kB 1.6 MB/s
Collecting certifi>=2017.4.17
  Downloading certifi-2022.9.24-py3-none-any.whl (161 kB)
     |████████████████████████████████| 161 kB 6.8 MB/s
Collecting idna<4,>=2.5
  Downloading idna-3.4-py3-none-any.whl (61 kB)
     |████████████████████████████████| 61 kB 4.8 MB/s
Collecting charset-normalizer<3,>=2
  Downloading charset_normalizer-2.1.1-py3-none-any.whl (39 kB)
````

Библиотека установлена, можно использовать.

----------------------------------------------------------------------------------------------------
<!--i ["кодировка", "encoding", "UTF-8"] --><a name="text_encoding_in_windows_terminal"></a>
# Указание кодировки в командной строке  Windows

Имеется простая программа, которая печатает строку полученную из стандартного ввода.

````code
print(input())
````

В консоли Windows может возникнуть проблема с символами 
[многобайтной кодировки](<!--page architecture-->#text_encoding): 

````shell
>echo привет | python program.py
??????
````

В данной ситуации помогло следующее решение:

````shell
>chcp 65001
Active code page: 65001

set PYTHONUTF8=1

>echo привет | python program.py
привет
````




